import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 读取字幕文件，统计其中的单词数量，并输出
 */
public class CountWord {

    private static final String dictionary = "C:\\Users\\admin\\Desktop\\newFolder";

    private static final String regDialogue = "Dialogue:.{0,200}}";

    private static final String word = "[a-zA-Z']{2,20}";

    public static void main(String[] args) throws Exception {
        String[] fileNameArray = readDict(dictionary);
        List<String> lineList = new ArrayList<>(15000);
        if (fileNameArray.length > 0) {
            for (String fileName : fileNameArray) {
                String fullFileName = dictionary + "\\" + fileName;
                File file = new File(fullFileName);
                // 读取文件的时候编码？
                InputStreamReader read = new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8);
                BufferedReader bufferedReader = new BufferedReader(read);
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    if (line.contains("Dialogue")) {
                        line = replaceDialogue(line);
                        lineList.add(line);
                    }
                }
            }
        }
        System.out.println(lineList.size());
        Map<String, Integer> map = new HashMap<>();
        lineList.forEach(line -> countWord(line, map));
        System.out.println(map.size());
        sortMap(map);
    }

    private static String[] readDict(String filePath) {
        File dictionary = new File(filePath);
        if (dictionary.isDirectory()) {
            return dictionary.list();
        } else {
            return new String[]{};
        }
    }

    private static String replaceDialogue(String req) {
        // 正则匹配字段并删除
        Pattern compile = Pattern.compile(regDialogue);
        Matcher matcher = compile.matcher(req);
        if (matcher.find()) {
            return matcher.replaceAll("");
        } else {
            return "";
        }
    }

    private static void countWord(String req, Map<String, Integer> map) {
        // 正则匹配字段并读取
        Pattern compile = Pattern.compile(word);
        Matcher matcher = compile.matcher(req);
        while (matcher.find()) {
            String newWord = matcher.group().toLowerCase();
            if (map.containsKey(newWord)) {
                int value = map.get(newWord);
                value = value + 1;
                map.put(newWord, value);
            } else {
                map.put(newWord, 1);
            }
        }
    }

    private static void sortMap(Map<String, Integer> map) {
        // map根据value排序
        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());
        Comparator<Map.Entry<String, Integer>> valueComparator = (o1, o2) -> o2.getValue() - o1.getValue();
        list.sort(valueComparator);
        list.forEach(map1 -> System.out.println(map1.getKey() + "   ==  " + map1.getValue()));
    }

}
