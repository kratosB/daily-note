package com.iqunxing.cm.util;

import java.lang.reflect.Field;
import java.util.Arrays;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

/**
 * @author null
 */
@Aspect
@Component
public class DaoAspect {

    @Pointcut("execution(public * com.iqunxing.cm.customer.dao.*.save(*))")
    public void webLog() {
    }

    @Before("webLog()")
    public void deBefore(JoinPoint joinPoint) {
        // 接收到请求，记录请求内容
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        // 记录下请求内容
        System.out.println("URL : " + request.getRequestURL().toString());
        System.out.println("HTTP_METHOD : " + request.getMethod());
        System.out.println("IP : " + request.getRemoteAddr());
        System.out.println(
                "CLASS_METHOD : " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());
        System.out.println("ARGS : " + Arrays.toString(joinPoint.getArgs()));
        Object[] args = joinPoint.getArgs();
        if (args.length > 0) {
            Object arg = args[0];
            Field[] declaredFields = arg.getClass().getDeclaredFields();
            Arrays.stream(declaredFields).filter(field -> StringUtils.equals(field.getName(), "customerId")).findAny()
                    .ifPresent(field -> {
                        try {
                            field.setAccessible(true);
                            String value = field.get(arg).toString();
                            String className = arg.getClass().getSimpleName();
                            String key = value + "|" + className;
                            System.out.println(key);
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    });
        }
    }

    @AfterReturning(returning = "ret", pointcut = "webLog()")
    public void doAfterReturning(Object ret) {
        // 处理完请求，返回内容
        System.out.println("方法的返回值 : " + ret);
    }

    /**
     * 后置异常通知
     *
     * @param joinPoint
     *            null
     */
    @AfterThrowing("webLog()")
    public void throwsS(JoinPoint joinPoint) {
        System.out.println("方法异常时执行....." + joinPoint.getSignature());
    }

    /**
     * 后置最终通知,final增强，不管是抛出异常或者正常退出都会执行
     *
     * @param joinPoint
     *            null
     */
    @After("webLog()")
    public void after(JoinPoint joinPoint) {
        System.out.println("方法最后执行....." + joinPoint.getSignature());
    }

    /**
     * 环绕通知,环绕增强，相当于MethodInterceptor
     *
     * @param pjp
     *            null
     * @return null
     */
    @Around("webLog()")
    public Object arround(ProceedingJoinPoint pjp) {
        System.out.println("方法环绕start.....");
        try {
            Object o = pjp.proceed();
            System.out.println("方法环绕proceed，结果是 :" + o);
            return o;
        } catch (Throwable e) {
            e.printStackTrace();
            return null;
        }
    }
}
