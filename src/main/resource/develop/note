1.消息模块
(1)模板增删改查
(2)重构老的通道发送部分（兼容多通道，配比），新增腾讯云通道）
(3)邮件埋点
(4)场景发送 rabbitMQ
(5)短链接
可以介绍迁移的时候优化了数据库表

2.抽奖
(1)接口，表
(2)责任链
(3)抽奖算法

3.点赞，星团，华瑞征信，加签，
(1)参与接口，表的讨论设计
(2)接口的实现
(3)解析excel表格，打包发送

6.网关
(1)路由功能
(2)过滤器
(3)负载均衡

7.配置中心
(1)微服务通过配置中心加载配置
(2)热加载
(3)加密
(4)区分环境

8.答题
接口，表，功能的设计
题库取题方法
redis


9.f21改版 newwwwwwwwwwwwwwwww
1. 读写分离
    1. redis key怎么设计（用hashmap数据类型是不是好一点，一个map代表一个表，里面是，主键->数据，或者，查询条件字段->数据）
    2. mysql更新之后remove缓存中对应的key
2. 有些数据，允许有一定的滞后和不精确。
比方booking页面上的一些细分类（经济型/舒适性/豪华型）后面都会跟上数量，如果每个用户登录的时候都去数据库查，不合适，因为用户可能并不需要非常精确的数据，可以很花资源。
可以做成job定时去跑，然后更新到缓存中，后面用户在主页的时候，直接去缓存中取用。这样可以快速返回，并节约数据库的资源。
用户如果点击了这个链接，进入相应的页面，再查出精确的数字，并更新缓存。
除此之外，job定时跑的时间也可以细分，有些不太会改变的数据，job就不用跑太频繁。比如之前做的时候，有xx类型的企业的数量。
3. 主动式缓存/被动式缓存
    1. 帖子里看到的，可以联系到2里面去，主动式是事先查，类似我上面2中提到的job，被动式就是查到更新缓存。参考帖子https://mp.weixin.qq.com/s/aQLX5w9EpgeDvJrhIlOFxw
    2. 这个帖子里还提到了缓存数据一致性的问题，提了两种方案。但是没说到我想的“更新之前先删除缓存”的方案，不太理解，可以研究一下。
    3. 这个帖子中，还有应对缓存穿透/击穿/雪崩的方案，感觉这个帖子里的东西，可以单独记录在redis目录下了。

10. 微信公众号
    1. oauth网页授权
    2. 微信扫码绑定
    3. 通知推送，微信菜单直接登录

11. aws

12. token

13. pdf转图片+图片识别+发票验真
    1. 转图片（内存优化）
        1. https://www.cnblogs.com/firstdream/p/5536013.html
        2. https://www.cnblogs.com/dyllove98/archive/2012/04/24/2468771.html
        3. https://blog.csdn.net/win7system/article/details/53747032











1. 多线程。
2. 索引区分度。
3. 联合索引差距（索引的本质）。
4. 乐观锁，悲观锁，代码实现。
5. 举例子，A查数据库，把age=13改成了14，B查数据库，把age=13改成15。然后A发现age=15岁，技术上该怎么优化呢。
6. 索引是不是越多越好。
7. spring事物。
8. transaction怎么保证多个事务一次性提交。
9. 事物内部怎么实现。
10. A服务调用B服务的时候超时了（比方说是转账），作为调用方，你不知道是成功还是失败，怎么处理呢。
（比方说路由用了很久，就算你超时之后先查再处理，可能也会在处理之前）。
（不管哪个服务调用，都有可能会有这种情况，不可能每个调用都用rabbitMQ吧）。
11. 你的job发消息，假设有100w数据要处理，每秒就10个。那么，如果你的job在跑，运维把你的机器重启了。
你的job就中断了，你有什么措施可以优化这个方案呢。（我说了redis，他说为什么不用数据库）。
12. http路由分发怎么做（调用网关的地方用什么方式，比方配置或者参数什么的）。
13. 多实例情况下，调用失败了/超时了，怎么办。
14. 邮件打开率。

1. 思考你做的这些东西的架构。
2. 技术要深入了解，乐观悲观锁，虽然是概念，但是融会贯通，还是要多思考。
3. 做项目对自己要求高一点，多想几种设计方案。

分库分表也可以了解一下。

下次可以问一下，他们更想要招什么类型的人，有哪些标准。







今天发现几个问题
1. 常量池不太明白，动态链接不知道是不是动态代理类似的东西
2. 类加载过程中，加载/验证/准备/解析，在准备这个环节中，会给static的变量赋初始值0，之后触发类构造器<clinit>()方法，给static变量赋值。而且初始值0这个过程是在方法区中的。
但是，今天看操作数栈的时候，回顾了Inside the Java virtual machine，里面的例子里面，有一个非static的变量，也会给变量赋初始值0，但是这个时候
1. 类加载早就结束了?
2. 变量不是静态变量?
3. 理论上类构造器<clinit>()方法也已经触发了?

好像明白了，
1. 加载/验证/准备/解析 这个流程中的 准备，是把static的变量初始化到方法区
1. Inside the Java virtual machine里面的例子里面，是非static变量，所以没在准备过程中初始化，而是后来初始化成0，然后放在内存中

2. 然后类加载完之后，到初始化过程，static变量和非static变量（目前都是0），一起被赋值




今天发现的问题，注解这一块好像不是很明白，可以搜一下怎么自己写注解，怎么看源码？









1. 多线程变量是不是共享的，什么样的变量是多线程共享，什么是线程单独。
2. String,StringBuilder,StringBuffer
2. 数据库锁和事物的区别，事物什么时候会失败
3. 业务幂等(这个问题无语了，非业务幂等其实就是让前端传一个参数，醉了)



数据库索引优化（可以看一下实战45讲的索引部分，还有order部分）
数据库锁，事务
偏向锁，轻量锁，重锁
